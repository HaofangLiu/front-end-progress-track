(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{336:function(v,t,e){v.exports=e.p+"assets/img/1.e1324e3f.jpeg"},337:function(v,t,e){v.exports=e.p+"assets/img/2.72f21510.png"},364:function(v,t,e){"use strict";e.r(t);var _=e(27),s=Object(_.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"nodejs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nodejs"}},[v._v("#")]),v._v(" NodeJS")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("NodeJS 不是一个Web后端框架， 不能对比flask/sping")])]),v._v(" "),t("li",[t("p",[v._v("不是一个编程语言， 不能与python/php对比")])]),v._v(" "),t("li",[t("p",[v._v("nodeJS是一个平台， 集成了多种技术")])])]),v._v(" "),t("h2",{attrs:{id:"nodejs-架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-架构"}},[v._v("#")]),v._v(" NodeJS 架构")]),v._v(" "),t("p",[v._v("Node.js主要分为四大部分，Node Standard Library，Node Bindings，V8，Libuv，架构图如下:\n"),t("img",{attrs:{src:e(336),alt:"node架构"}})]),v._v(" "),t("ul",[t("li",[v._v("Node Standard Library 是我们每天都在用的标准库，如Http, Buffer 模块。")]),v._v(" "),t("li",[v._v("Node Bindings 是沟通JS 和 C++的桥梁，封装V8和Libuv的细节，向上层提供基础API服务。\n"),t("ul",[t("li",[v._v("这一层是支撑 Node.js 运行的关键，由 C/C++ 实现。")]),v._v(" "),t("li",[v._v("V8 是Google开发的JavaScript引擎，提供JavaScript运行环境，可以说它就是 Node.js 的发动机。")]),v._v(" "),t("li",[v._v("Libuv 是专门为Node.js开发的一个封装库，提供跨平台的异步I/O能力.")]),v._v(" "),t("li",[v._v("C-ares：提供了异步处理 DNS 相关的能力。")]),v._v(" "),t("li",[v._v("http_parser、OpenSSL、zlib 等：提供包括 http 解析、SSL、数据压缩等其他的能力。")])])])]),v._v(" "),t("h3",{attrs:{id:"v8是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v8是什么"}},[v._v("#")]),v._v(" V8是什么")]),v._v(" "),t("h4",{attrs:{id:"功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#功能"}},[v._v("#")]),v._v(" 功能")]),v._v(" "),t("ul",[t("li",[v._v("将JS源代码变为本地代码并执行")]),v._v(" "),t("li",[v._v("维护调用栈，确保JS函数的执行顺序")]),v._v(" "),t("li",[v._v("内存管理，为所有对象分配内存")]),v._v(" "),t("li",[v._v("垃圾回收， 重复利用无用的内存")]),v._v(" "),t("li",[v._v("实现js的标准库")])]),v._v(" "),t("h4",{attrs:{id:"注意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[v._v("#")]),v._v(" 注意")]),v._v(" "),t("ul",[t("li",[v._v("V8不提供DOM API")]),v._v(" "),t("li",[v._v("V8 执行JS是单线程的")]),v._v(" "),t("li",[v._v("可以开启两个线程 分别执行JS")]),v._v(" "),t("li",[v._v("V8 本身是包含多个线程的， 如垃圾回收为单独线程")]),v._v(" "),t("li",[v._v("自带 eventloop 但nodejs基于libuv自己做了一个")])]),v._v(" "),t("h3",{attrs:{id:"什么是eventloop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是eventloop"}},[v._v("#")]),v._v(" 什么是eventloop")]),v._v(" "),t("h4",{attrs:{id:"什么是event"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是event"}},[v._v("#")]),v._v(" 什么是Event")]),v._v(" "),t("ul",[t("li",[v._v("计时器到了 "),t("code",[v._v("setTimeout(f1, 100)")])]),v._v(" "),t("li",[v._v("文件可以读取了， 读取出错了  "),t("code",[v._v('fs.readFile("./1,txt", f2)')])]),v._v(" "),t("li",[v._v("socket 有内容了， 关闭了 "),t("code",[v._v("server.on('close', f3)")])])]),v._v(" "),t("h5",{attrs:{id:"如果同时触发-node会怎么办"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如果同时触发-node会怎么办"}},[v._v("#")]),v._v(" 如果同时触发， Node会怎么办")]),v._v(" "),t("ul",[t("li",[v._v("肯定有某种顺序（优先级）")]),v._v(" "),t("li",[v._v("这种顺序应该人为规定")])]),v._v(" "),t("h4",{attrs:{id:"什么是loop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是loop"}},[v._v("#")]),v._v(" 什么是Loop")]),v._v(" "),t("ul",[t("li",[v._v("loop是循环")]),v._v(" "),t("li",[v._v("因为事件是有优先级的，所以处理起来也是分先后的")]),v._v(" "),t("li",[v._v("所以nodejs会顺序轮询每种事件")]),v._v(" "),t("li",[v._v("轮询是循环的。 1->2->3->1->2->3")])]),v._v(" "),t("h4",{attrs:{id:"eventloop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eventloop"}},[v._v("#")]),v._v(" EventLoop")]),v._v(" "),t("ul",[t("li",[v._v("操作系统可以触发事件， JS可以处理事件")]),v._v(" "),t("li",[v._v("EventLoop 就是对事件处理顺序的管理。")])]),v._v(" "),t("p",[t("img",{attrs:{src:e(337),alt:"node架构"}})]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("timers 阶段")]),v._v("：这个阶段执行 setTimeout 和 setInterval 的回调函数。(多长时间后可以执行回调函数)")]),v._v(" "),t("li",[v._v("I/O callbacks 阶段：不在 timers 阶段、close callbacks 阶段和 check 阶段这三个阶段执行的回调，都由此阶段负责，这几乎包含了所有回调函数。")]),v._v(" "),t("li",[v._v("idle, prepare 阶段（译注：看起来是两个阶段，不过这不重要）：event loop 内部使用的阶段（译注：我们不用关心这个阶段）")]),v._v(" "),t("li",[t("strong",[v._v("poll 阶段")]),v._v("：获取新的 I/O 事件。在某些场景下 Node.js 会阻塞在这个阶段。")]),v._v(" "),t("li",[t("strong",[v._v("check 阶段")]),v._v("：执行 setImmediate() 的回调函数。")]),v._v(" "),t("li",[v._v("close callbacks 阶段：执行关闭事件的回调函数，如 socket.on('close', fn) 里的 fn。")])]),v._v(" "),t("h4",{attrs:{id:"注意-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意-2"}},[v._v("#")]),v._v(" 注意：")]),v._v(" "),t("ul",[t("li",[v._v("大部分事件nodejs都停在poll轮询阶段")]),v._v(" "),t("li",[v._v("大部分事件都在poll阶段被处理（文件/网络请求）")])]),v._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结：")]),v._v(" "),t("ul",[t("li",[v._v("用libuv进行异步I/O操作")]),v._v(" "),t("li",[v._v("用event loop管理事件处理顺序")]),v._v(" "),t("li",[v._v("用C/C++处理DNS/HTTP")]),v._v(" "),t("li",[v._v("用bindings让JS和C/C++沟通")]),v._v(" "),t("li",[v._v("V8运行JS")]),v._v(" "),t("li",[v._v("用NodeJS简化JS代码")])]),v._v(" "),t("h2",{attrs:{id:"file文件系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#file文件系统"}},[v._v("#")]),v._v(" file文件系统")])])}),[],!1,null,null,null);t.default=s.exports}}]);