(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{342:function(s,a,n){s.exports=n.p+"assets/img/1.edb195a4.png"},343:function(s,a,n){s.exports=n.p+"assets/img/2.e4bf9595.png"},344:function(s,a,n){s.exports=n.p+"assets/img/3.6fd7fc1a.png"},345:function(s,a,n){s.exports=n.p+"assets/img/4.534505ec.png"},369:function(s,a,n){"use strict";n.r(a);var t=n(27),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"typescript-知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript-知识点"}},[s._v("#")]),s._v(" typescript 知识点")]),s._v(" "),a("h2",{attrs:{id:"ts-如何运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts-如何运行"}},[s._v("#")]),s._v(" ts 如何运行")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("一段 js 代码可以直接运行在浏览器/nodejs 环境中， 但是 ts 需要进行类型擦除才可以运行在浏览器/nodejs，否则会直接报错。 但可以通过 deno 直接运行。")])]),s._v(" "),a("li",[a("p",[s._v("如果需要擦除类型，可以使用的包包含：")]),s._v(" "),a("ul",[a("li",[s._v("esbuild （快，不检查 ts 语法） "),a("code",[s._v("npm i -g esbuild")])]),s._v(" "),a("li",[s._v("swc （快，不检查 ts 语法） "),a("code",[s._v("npm i -g @swc/cli @swc/core")])]),s._v(" "),a("li",[s._v("tsc （慢， 会检查语法） "),a("code",[s._v("npm i -g typescript")])]),s._v(" "),a("li",[s._v("babel （慢， 会检查语法， 依赖多，需要在项目中运行）"),a("code",[s._v("npm i @babel/core @babel/cli @babel/preset-typescript")])])])])]),s._v(" "),a("h2",{attrs:{id:"类型擦除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型擦除"}},[s._v("#")]),s._v(" 类型擦除")]),s._v(" "),a("p",[s._v("简单来讲就是 ts 经过类型擦除可以转化成 ES6 代码\n"),a("img",{attrs:{src:n(342),alt:"ts compile"}})]),s._v(" "),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),a("h3",{attrs:{id:"js-ts-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-ts-类型"}},[s._v("#")]),s._v(" JS / TS 类型")]),s._v(" "),a("h4",{attrs:{id:"js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[s._v("#")]),s._v(" JS")]),s._v(" "),a("ul",[a("li",[s._v("null / undefined / string / number / boolean / object / Symbol / bigint")])]),s._v(" "),a("h4",{attrs:{id:"ts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts"}},[s._v("#")]),s._v(" ts")]),s._v(" "),a("ul",[a("li",[s._v("以上所有， 加上")]),s._v(" "),a("li",[s._v("void / never / enum / unknown / any")]),s._v(" "),a("li",[s._v("再加上自定义类型 type / interface")])]),s._v(" "),a("h3",{attrs:{id:"为什么有两个-number-number-string-string-boolean-boolean-呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么有两个-number-number-string-string-boolean-boolean-呢"}},[s._v("#")]),s._v(" 为什么有两个 number/Number | string/String | boolean/Boolean 呢？")]),s._v(" "),a("ul",[a("li",[s._v("因为被 js 做了一层包装对象")]),s._v(" "),a("li",[a("code",[s._v("42.toFixed(2)")]),s._v("等价于"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let temp = new Number;\nvalue = tem.toFixed(2);\ndelete temp\nreturn value;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[s._v("所以 JS 中的 Number String Boolean 只用于包装对象")]),s._v(" "),a("li",[s._v("正常情况下 js/ts 都不用")])]),s._v(" "),a("h3",{attrs:{id:"object-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-类型"}},[s._v("#")]),s._v(" Object 类型")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("正常不会直接使用 object 类型在 ts")])]),s._v(" "),a("li",[a("p",[s._v("对象 = 普通对象")]),s._v(" "),a("ul",[a("li",[s._v("数组对象 Array")]),s._v(" "),a("li",[s._v("函数对象 Function")]),s._v(" "),a("li",[s._v("正则对象 RegExp")]),s._v(" "),a("li",[s._v("日期对象 Date")])])])]),s._v(" "),a("h4",{attrs:{id:"如何在-ts-中描述对象数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何在-ts-中描述对象数据类型"}},[s._v("#")]),s._v(" 如何在 ts 中描述对象数据类型？")]),s._v(" "),a("ol",[a("li",[s._v("用 class 或者 constructor 描述")]),s._v(" "),a("li",[s._v("使用 type 或者 interface 描述")])]),s._v(" "),a("div",{staticClass:"language-Javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//索引签名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//k可以为任意")]),s._v("\ntype "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//等于泛型")]),s._v("\ntype "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Record"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("结论： ts 一般使用索引签名或者 "),a("code",[s._v("Record")]),s._v(" 泛型来描述普通对象")])]),s._v(" "),a("h3",{attrs:{id:"数组对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组对象"}},[s._v("#")]),s._v(" 数组对象")]),s._v(" "),a("div",{staticClass:"language-Javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("type "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//等价于")]),s._v("\ntype "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AA")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Array"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("结论： ts 一般使用"),a("code",[s._v("Array<?>")]),s._v("或者"),a("code",[s._v("string[]")]),s._v("或者"),a("code",[s._v("[string, number]")]),s._v("来描述数组")])]),s._v(" "),a("h3",{attrs:{id:"函数对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数对象"}},[s._v("#")]),s._v(" 函数对象")]),s._v(" "),a("div",{staticClass:"language-Javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("type "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("fnA")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("b")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("结论： ts 一般使用"),a("code",[s._v("() => ?")]),s._v(" 来描述函数")])]),s._v(" "),a("h3",{attrs:{id:"any-unknown-never"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#any-unknown-never"}},[s._v("#")]),s._v(" any/unknown/never")]),s._v(" "),a("ul",[a("li",[s._v("any 全知全能")]),s._v(" "),a("li",[s._v("unknown 适合值从外部获取，不确定类型时候使用。 尽量使用这个然后自己去断言")]),s._v(" "),a("li",[s._v("never 空集合不包含任何类型")])]),s._v(" "),a("h3",{attrs:{id:"enum-枚举类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enum-枚举类型"}},[s._v("#")]),s._v(" enum 枚举类型")]),s._v(" "),a("h4",{attrs:{id:"应用场景-1-数字情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-1-数字情况"}},[s._v("#")]),s._v(" 应用场景 1 数字情况")]),s._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 什么时候用enum")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 数字 初始值为0")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  todo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  done"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  archived"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  deleted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h4",{attrs:{id:"应用场景-2-前端权限管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-2-前端权限管理"}},[s._v("#")]),s._v(" 应用场景 2 前端权限管理")]),s._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" Permission "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  None "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0000")]),s._v("\n  Read "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0001")]),s._v("\n  Write "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0010")]),s._v("\n  Delete "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0100")]),s._v("\n  Manage "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Read "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Write "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0111")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  permission"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Permission"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//0b开头证明这是二进制在js中")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" user"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" User "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  permission"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0b0010")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 任何一个x 与 Permission.Write 进行与操作（&） 结果等于Permission.Write， 那证明权限拥有")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 因为 与&预算， 都是1才为1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("permission "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" Permission"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" Permission"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"user has right to write"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h4",{attrs:{id:"什么时候不用-enum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候不用-enum"}},[s._v("#")]),s._v(" 什么时候不用 enum")]),s._v(" "),a("ul",[a("li",[s._v("使用 string | other 类型时， 不用 enum")]),s._v(" "),a("li",[s._v("原因是可以使用更为简单直接的写法， 可直接提示赋值")])]),s._v(" "),a("h3",{attrs:{id:"type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[s._v("#")]),s._v(" type")]),s._v(" "),a("ul",[a("li",[s._v("类型别名 Type Aliases")]),s._v(" "),a("li",[s._v("给其他类型取个名字(并没有产生真的人)")]),s._v(" "),a("li",[s._v("几乎什么时候都可以用")]),s._v(" "),a("li",[s._v("type 不可以重新赋值")])]),s._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FalseLike")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" | 0 | false | null | undefined"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Point")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Points")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Line")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Circle")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" center"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" radisu"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FnWithProp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//note: 对象中声明函数不能像上面用箭头函数，要用冒号")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  prop"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface"}},[s._v("#")]),s._v(" interface")]),s._v(" "),a("ul",[a("li",[s._v("用来声明接口")]),s._v(" "),a("li",[s._v("描述对象的属性(declare the shapes of objects)")]),s._v(" "),a("li",[s._v("interface 自动合并")])]),s._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Point")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Points")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Array")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Point"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("img",{attrs:{src:n(343),alt:"ts interface"}})]),s._v(" "),a("h3",{attrs:{id:"type-interface-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-interface-区别"}},[s._v("#")]),s._v(" type interface 区别")]),s._v(" "),a("ul",[a("li",[s._v("区别 1: interface 只描述对象 type 则描述所有数据")]),s._v(" "),a("li",[s._v("区别 2： type 只是别名， interface 是（真名）类型声明")]),s._v(" "),a("li",[s._v("区别 3： 对外 API 尽量用 interface， 方便拓展。 对内部 API 尽量用 type, 防止代码分散")])]),s._v(" "),a("h3",{attrs:{id:"void"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#void"}},[s._v("#")]),s._v(" void")]),s._v(" "),a("ul",[a("li",[s._v("返回空， 但是编译不会报错， 如果想要使用返回值时报错")])]),s._v(" "),a("h3",{attrs:{id:"联合类型-并集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合类型-并集"}},[s._v("#")]),s._v(" 联合类型 （并集 | ）")]),s._v(" "),a("h4",{attrs:{id:"举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[s._v("#")]),s._v(" 举例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type A1 = number;\ntype B1 = string;\n\ntype C1 = A1 | B1;\n\nconst c1: C1 = "42";\nconst c2: C1 = 12;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type A2 = { name: string };\ntype B2 = { age: number };\n\ntype C2 = A2 | B2;\n\nconst c11: C2 = {\n  name: "xxx",\n  age: 61,\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("img",{attrs:{src:n(344),alt:"联合类型"}})]),s._v(" "),a("h4",{attrs:{id:"如何使用联合类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用联合类型"}},[s._v("#")]),s._v(" 如何使用联合类型？")]),s._v(" "),a("p",[s._v("假如接受一个联合类型，string | number\n既不能当作 string 直接使用，或者 number 直接使用\n那么怎么直接使用这个变量？")]),s._v(" "),a("p",[s._v("答案： 想办法区分出类型")]),s._v(" "),a("h4",{attrs:{id:"类型收窄"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型收窄"}},[s._v("#")]),s._v(" 类型收窄")]),s._v(" "),a("h5",{attrs:{id:"方法-1-使用-typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-1-使用-typeof"}},[s._v("#")]),s._v(" 方法 1： 使用 typeof")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const f1 = (a: number | string) => {\n  // 注意，这里只有50%几率是number / string\n  // 所以不能直接使用其对应的方法， 只能使用number & string的共同方法\n  // 只能想办法区分开类型\n\n  //方法1：使用typeof\n  // 也叫做类型收窄\n  if (typeof a === "number") {\n    a.toFixed(2);\n  } else if (typeof a === "string") {\n    a.toLocaleLowerCase();\n  } else {\n    // 注意这里是never\n    // 不能对a进行任何操作\n    console.log(a);\n  }\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("可以得到的值包含： string / number / bigint / boolean / symbal / undefined / object / function")])]),s._v(" "),a("li",[a("p",[s._v("局限性：array / normal obj / date / null 都会得到 object")])])]),s._v(" "),a("h5",{attrs:{id:"方法-2-使用-instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-2-使用-instanceof"}},[s._v("#")]),s._v(" 方法 2： 使用 instanceOf")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const f2 = (a: Date | Date[]) => {\n  //方法2：使用instanceOf\n  if (a instanceof Date) {\n    a.getDate();\n  } else if (a instanceof Array) {\n    a.push(new Date());\n  } else {\n    // 注意这里是never\n    // 不能对a进行任何操作\n    console.log(a);\n  }\n};\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("ul",[a("li",[s._v("局限性：\n"),a("ul",[a("li",[s._v("不支持 string / number / boolean 等")]),s._v(" "),a("li",[s._v("不支持独有的 ts 类型")]),s._v(" "),a("li",[a("img",{attrs:{src:n(345),alt:"不支持独有的类型"}})])])])]),s._v(" "),a("h5",{attrs:{id:"方法-3-使用-in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-3-使用-in"}},[s._v("#")]),s._v(" 方法 3： 使用 in")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type Person = {\n  name: string;\n};\n\ntype Animal = {\n  age: number;\n};\n\nconst f3 = (a: Person | Animal) => {\n  //方法3：使用in\n  if ("name" in a) {\n    a.name.charCodeAt(0);\n  } else if ("age" in a) {\n    a.age.toString();\n  } else {\n    // 注意这里是never\n    // 不能对a进行任何操作\n    console.log(a);\n  }\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("ul",[a("li",[s._v("局限性：适用于部分对象")])]),s._v(" "),a("h5",{attrs:{id:"方法-4-使用-js-中的判断类型的函数区分或者逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-4-使用-js-中的判断类型的函数区分或者逻辑"}},[s._v("#")]),s._v(" 方法 4： 使用 js 中的判断类型的函数区分或者逻辑")]),s._v(" "),a("ul",[a("li",[s._v("比如 Array.isArray 等")])]),s._v(" "),a("h4",{attrs:{id:"类型谓词-is-区分类型的万全办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型谓词-is-区分类型的万全办法"}},[s._v("#")]),s._v(" 类型谓词 is（区分类型的万全办法）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type Rect = {\n  width: number;\n  height: number;\n};\n\ntype Circle = {\n  center: [number, number];\n  radius: number;\n};\n\n\n// 在你的代码中，isRect和isCircle被定义为箭头函数表达式，所以按照正常的规则，它们应该在使用之前进行定义。\n// 然而，在这种情况下，由于它们被用作类型谓词（Type Predicate），TypeScript的类型系统会对其进行特殊处理。\n\n// TypeScript允许在类型谓词的上下文中使用尚未声明的函数。\n// 这是因为类型谓词的类型检查是基于形状和类型的，而不是基于具体的运行时行为。\n// 所以，尽管在代码中它们被定义为箭头函数表达式，在类型检查期间，TypeScript将会将它们视为类型谓词并进行处理。\n\nconst f1 = (a: Rect | Circle) => {\n  if (isRect(a)) {\n    console.log(a);\n  } else {\n    console.log(a);\n  }\n};\n\nconst isRect = (x: Rect | Circle): x is Rect => {\n  return "height" in x && "width" in x;\n};\n\nconst isCircle = (x: Rect | Circle): x is Circle => {\n  return "center" in x && "radius" in x;\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("ul",[a("li",[s._v("优点： 支持所有 ts 类型")]),s._v(" "),a("li",[s._v("缺点：麻烦")])]),s._v(" "),a("h4",{attrs:{id:"可辩别联合-discriminated-unions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可辩别联合-discriminated-unions"}},[s._v("#")]),s._v(" 可辩别联合 Discriminated Unions")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type Rect = {\n  kind: "rect";\n  width: number;\n  height: number;\n};\n\ntype Circle = {\n  kind: "circle";\n  center: [number, number];\n  radius: number;\n};\n\ntype Shape = Circle | Rect; // 这里Shape就是可辨别联合类型\n\nconst f2 = (shape: Shape) => {\n  if (shape.kind === "circle") {\n    console.log(shape); // Circle\n  } else {\n    console.log(shape); // Rect\n  }\n};\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("优点： 让复杂类型的收窄，变成简单类型的对比")])]),s._v(" "),a("li",[a("p",[s._v("要求：T=A|B|C|D....")]),s._v(" "),a("ul",[a("li",[s._v("要求 A|B|C|D 有相同的属性（比如 kind）")]),s._v(" "),a("li",[s._v("kind 的类型必须是简单类型")]),s._v(" "),a("li",[s._v("各类型中的 kind 可以区分（无交集）")]),s._v(" "),a("li",[s._v("这个 T 就可以成为可辩别联合类型")])])])]),s._v(" "),a("h3",{attrs:{id:"交叉类型-交集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交叉类型-交集"}},[s._v("#")]),s._v(" 交叉类型 （交集 &）")]),s._v(" "),a("h4",{attrs:{id:"举例-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例-2"}},[s._v("#")]),s._v(" 举例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type A = string & number; // A 是never\n\ntype L = {\n  lefthand: string;\n};\n\ntype R = {\n  righthand: string;\n};\n\ntype C = L | R;\ntype D = L & R;\n\nconst d: D = {\n  //  Property righthand   is missing\n  lefthand: "x",\n};\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("假如使用 type 有属性冲突，会被推断成 never， 不能赋值")])]),s._v(" "),a("li",[a("p",[s._v("假如使用 interface 有属性冲突，会直接报错")])]),s._v(" "),a("li",[a("p",[s._v("两个函数的交集， 得到一个参数的并集")])])]),s._v(" "),a("h4",{attrs:{id:"结论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[s._v("#")]),s._v(" 结论：")]),s._v(" "),a("ul",[a("li",[s._v("交叉类型常用于有交集的类型 A 、B")]),s._v(" "),a("li",[s._v("注意理解"),a("code",[s._v("type a = {name : string }")]),s._v(" 是一个 name 为 string 的对象 A 类型，意思是这个可以包含其他任何属性在对象中， 所以并不单单这一个对象会包含在其中")]),s._v(" "),a("li",[s._v("但是赋值/第一次声明的时候， ts 会做严格检查， 也就是说第一次声明不能有额外的值在对象中")])]),s._v(" "),a("h2",{attrs:{id:"类型兼容与赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型兼容与赋值"}},[s._v("#")]),s._v(" 类型兼容与赋值")]),s._v(" "),a("h3",{attrs:{id:"为什么要兼容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要兼容"}},[s._v("#")]),s._v(" 为什么要兼容")]),s._v(" "),a("ul",[a("li",[s._v("类型往往无法一致")]),s._v(" "),a("li",[s._v("你有的 我都有， 则我能代替你")]),s._v(" "),a("li",[s._v("y 有的， x 都有， 则 x 兼容 y")])]),s._v(" "),a("h4",{attrs:{id:"简单类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单类型"}},[s._v("#")]),s._v(" 简单类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type A = string | number\nlet a : A = 'hi'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"普通对象兼容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#普通对象兼容"}},[s._v("#")]),s._v(" 普通对象兼容")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type Person = {\n  name: string,\n  age:number\n}\n\nlet user = {\n  name:"xxx",\n  age: 18,\n  id:1,\n  email:"xx"\n}\n\nlet p: Person;\np = user\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("这里 user 兼容 Person， 所以直接赋值不报错， 即使作为参数也不会报错")]),s._v(" "),a("h4",{attrs:{id:"复杂函数-函数包含参数和返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂函数-函数包含参数和返回值"}},[s._v("#")]),s._v(" 复杂函数（函数包含参数和返回值）")]),s._v(" "),a("h5",{attrs:{id:"参数个数不同-能兼容吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数个数不同-能兼容吗"}},[s._v("#")]),s._v(" 参数个数不同，能兼容吗？")]),s._v(" "),a("p",[s._v("接收两个参数的函数 = 接受一个参数的函数 （这样是 ok 的， 反之报错）")]),s._v(" "),a("h5",{attrs:{id:"参数类型不同-能兼容吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数类型不同-能兼容吗"}},[s._v("#")]),s._v(" 参数类型不同，能兼容吗？")]),s._v(" "),a("p",[s._v("对参数要求少的可以赋值给对参数要求多的")]),s._v(" "),a("h5",{attrs:{id:"返回值类型不同-能兼容吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回值类型不同-能兼容吗"}},[s._v("#")]),s._v(" 返回值类型不同， 能兼容吗？")]),s._v(" "),a("p",[s._v("返回值属性少集合大 = 返回值属性多集合小")]),s._v(" "),a("h2",{attrs:{id:"对象类型语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象类型语法"}},[s._v("#")]),s._v(" 对象类型语法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Person = {\n  name: string;\n};\n\ninterface PersonInterface{\n  name: string;\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"索引签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引签名"}},[s._v("#")]),s._v(" 索引签名")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Person2 = {\n  name: string;\n  age?: number;\n};\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"映射类型-多用于泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#映射类型-多用于泛型"}},[s._v("#")]),s._v(" 映射类型（多用于泛型）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Hash2 = {\n  [key in string]: unknown;\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"表示可选"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表示可选"}},[s._v("#")]),s._v(" ？表示可选")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Person2 = {\n  name: string;\n  age?: number;\n};\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"readonly-表示只读-不能写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readonly-表示只读-不能写"}},[s._v("#")]),s._v(" readonly 表示只读， 不能写")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Person2 = {\n  readonly id:number;\n  name: string;\n  age?: number;\n};\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"函数类型语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数类型语法"}},[s._v("#")]),s._v(" 函数类型语法")]),s._v(" "),a("p",[s._v("对象的语法全部适用于函数")]),s._v(" "),a("h3",{attrs:{id:"声明函数及其类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明函数及其类型"}},[s._v("#")]),s._v(" 声明函数及其类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//第一种， 先写类型再赋值\ntype F1 = (a:number, b:number) => number\nconst f1: F1 = (a,b) => a + b\n\n//第二种， 先实现箭头函数， 再获取类型\nconst f2= (a:number, b:number):number => a + b\ntype F2 = typeof f2\n\n//第三种， 先实现普通函数， 再获取类型\nfunction f3= (this:unknown, a:number, b:number):number{\n  return a + b\n}\ntype F3 = typeof f3\n\n//第四种， 先实现匿名函数， 再获取类型\nconst f4= function(this:unknown, a:number, b:number):number{\n  return a + b\n}\ntype F4 = typeof f4\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h4",{attrs:{id:"类型谓词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型谓词"}},[s._v("#")]),s._v(" 类型谓词")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("funtion isPerson(x: Person | Animal):x is Person{\n  return 'name' in x\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"可选参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选参数"}},[s._v("#")]),s._v(" 可选参数")]),s._v(" "),a("p",[s._v("addEventListener 第三个参数")]),s._v(" "),a("h5",{attrs:{id:"参数默认值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数默认值"}},[s._v("#")]),s._v(" 参数默认值")]),s._v(" "),a("h4",{attrs:{id:"参数也可以是函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数也可以是函数"}},[s._v("#")]),s._v(" 参数也可以是函数")]),s._v(" "),a("h4",{attrs:{id:"返回值也是函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回值也是函数"}},[s._v("#")]),s._v(" 返回值也是函数")]),s._v(" "),a("p",[s._v("函数柯里化（redux 的 connect）")]),s._v(" "),a("h2",{attrs:{id:"泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[s._v("#")]),s._v(" 泛型")]),s._v(" "),a("ul",[a("li",[s._v("ts 泛型 -> 理解为 js 的函数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type F<A|B> = A|B // 前面为接收参数 后为返回结果\ntype Result = F<string, number> // 返回一个类型， 调用F函数\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("不确定接受的参数是什么， 在需要用的时候才知道， 传进来的时候才知道")])]),s._v(" "),a("h3",{attrs:{id:"extends"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extends"}},[s._v("#")]),s._v(" extends")]),s._v(" "),a("ul",[a("li",[s._v("读作包含于（一个集合小于等于某个集合）")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type LikeString<T> = T extends string ? true : false;\ntype LikeNumber<T> = T extends number ? 1 : 2;\ntype LikePerson<T> = T extends Person ? 'yes' : 'no';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("规则 1： 若泛型 T 为 never， 则表达式的值为 never")]),s._v(" "),a("li",[s._v("规则 2： 若泛型 T 为联合类型， 则分开计算")]),s._v(" "),a("li",[s._v("注意 仅仅对泛型有效")])]),s._v(" "),a("p",[s._v("泛型中，我们可以使用 extends 关键字来约束传入的泛型参数必须符合要求。关于 extends，A extends B 意味着 A 是 B 的子类型，这里我们暂时只需要了解非常简单的判断逻辑，也就是说 A 比 B 的类型更精确，或者说更复杂。具体来说，可以分为以下几类。")]),s._v(" "),a("ul",[a("li",[s._v("更精确，如字面量类型是对应原始类型的子类型，即 'jian' extends string，599 extends number 成立。类似的，联合类型子集均为联合类型的子类型，即 1、 1 | 2 是 1 | 2 | 3 | 4 的子类型。")]),s._v(" "),a("li",[s._v("更复杂，如 { name: string } 是 {} 的子类型，因为在 {} 的基础上增加了额外的类型，基类与派生类（父类与子类）同理。")])]),s._v(" "),a("h3",{attrs:{id:"keyof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyof"}},[s._v("#")]),s._v(" keyof")]),s._v(" "),a("ul",[a("li",[s._v("keyof 操作符接受一个对象类型作为参数，返回该对象属性名组成的字面量联合类型，其作用类似 JavaScript 中的 Object.keys")]),s._v(" "),a("li",[s._v("获取到所有 T 泛型的 key")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Person = {\n  name: string;\n  age: number;\n};\ntype GetKeys<T> = keyof T;\n\n\ntype Result = GetKeys<Person> //name || age\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"extends-keyof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extends-keyof"}},[s._v("#")]),s._v(" extends keyof")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type GetKeyType<T, K extends keyof T> = T[K] // 如果不加会报错， 因为K不一定是T的key\n\ntype ResTwo = GetKeyType<Person, 'name'>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"t-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t-number"}},[s._v("#")]),s._v(" T[number]")]),s._v(" "),a("p",[s._v("获取元组 T 中所有元素的联合类型，即取出元组中所有可能的值，我们可以使用 T[number] 的写法。")]),s._v(" "),a("h3",{attrs:{id:"泛型约束与默认值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型约束与默认值"}},[s._v("#")]),s._v(" 泛型约束与默认值")]),s._v(" "),a("p",[s._v("像函数可以声明一个参数的默认值一样，泛型同样有着默认值的设定，比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Factory<T = boolean> = T | number | string;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("泛型中，我们可以使用 extends 关键字来约束传入的泛型参数必须符合要求。关于 extends，A extends B 意味着 A 是 B 的子类型，这里我们暂时只需要了解非常简单的判断逻辑，也就是说 A 比 B 的类型更精确，或者说更复杂。具体来说，可以分为以下几类。")]),s._v(" "),a("ul",[a("li",[s._v("更精确，如字面量类型是对应原始类型的子类型，即 'jian' extends string，599 extends number 成立。类似的，联合类型子集均为联合类型的子类型，即 1、 1 | 2 是 1 | 2 | 3 | 4 的子类型。")]),s._v(" "),a("li",[s._v("更复杂，如 { name: string } 是 {} 的子类型，因为在 {} 的基础上增加了额外的类型，基类与派生类（父类与子类）同理。")])]),s._v(" "),a("p",[s._v("还可以给默认值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type ResStatus<ResCode extends number = 10000> = ResCode extends 10000 | 10001 | 10002\n  ? 'success'\n  : 'failure';\n\ntype Res4 = ResStatus; // \"success\"\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"对象类型中的泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象类型中的泛型"}},[s._v("#")]),s._v(" 对象类型中的泛型")]),s._v(" "),a("p",[s._v("由于泛型提供了对类型结构的复用能力，我们也经常在对象类型结构中使用泛型。最常见的一个例子应该还是响应类型结构的泛型处理：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface IRes<TData = unknown> {\n  code: number;\n  error?: string;\n  data: TData;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"函数中的泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数中的泛型"}},[s._v("#")]),s._v(" 函数中的泛型")]),s._v(" "),a("p",[s._v("假设我们有这么一个函数，它可以接受多个类型的参数并进行对应处理，比如：")]),s._v(" "),a("ul",[a("li",[s._v("对于字符串，返回部分截取；")]),s._v(" "),a("li",[s._v("对于数字，返回它的 n 倍；")]),s._v(" "),a("li",[s._v("对于对象，修改它的属性并返回。\n这个时候，我们要如何对函数进行类型声明？是 any 大法好？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function handle(input: string): string\nfunction handle(input: number): number\nfunction handle(input: {}): {}\nfunction handle(input: string | number | {}): string | number | {} { }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这个时候，我们就该请出泛型了：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function handle<T>(input: T): T {}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"类型查询操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型查询操作符"}},[s._v("#")]),s._v(" 类型查询操作符")]),s._v(" "),a("p",[s._v("TypeScript 还新增了用于类型查询的 typeof ，即 Type Query Operator，这个 typeof 返回的是一个 TypeScript 类型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const str = "jian";\n\nconst obj = { name: "jian" };\n\nconst nullVar = null;\nconst undefinedVar = undefined;\n\nconst func = (input: string) => {\n  return input.length > 10;\n}\n\ntype Str = typeof str; // "jian"\ntype Obj = typeof obj; // { name: string; }\ntype Null = typeof nullVar; // null\ntype Undefined = typeof undefined; // undefined\ntype Func = typeof func; // (input: string) => boolean\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h3",{attrs:{id:"基于-in-与-instanceof-的类型保护"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-in-与-instanceof-的类型保护"}},[s._v("#")]),s._v(" 基于 in 与 instanceof 的类型保护")]),s._v(" "),a("p",[s._v("in 操作符 并不是 TypeScript 中新增的概念，而是 JavaScript 中已有的部分，它可以通过 key in object 的方式来判断 key 是否存在于 object 或其原型链上（返回 true 说明存在）。\n既然能起到区分作用，那么 TypeScript 中自然也可以用它来保护类型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Foo {\n  foo: string;\n  fooOnly: boolean;\n  shared: number;\n}\n\ninterface Bar {\n  bar: string;\n  barOnly: boolean;\n  shared: number;\n}\n\nfunction handle(input: Foo | Bar) {\n  if ('foo' in input) {\n    input.fooOnly;\n  } else {\n    input.barOnly;\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("除此之外，JavaScript 中还存在一个功能类似于 typeof 与 in 的操作符：instanceof，它判断的是原型级别的关系，如 foo instanceof Base 会沿着 foo 的原型链查找 Base.prototype 是否存在其上。当然，在 ES6 已经无处不在的今天，我们也可以简单地认为这是判断 foo 是否是 Base 类的实例。同样的，instanceof 也可以用来进行类型保护：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class FooBase {}\n\nclass BarBase {}\n\nclass Foo extends FooBase {\n  fooOnly() {}\n}\nclass Bar extends BarBase {\n  barOnly() {}\n}\n\nfunction handle(input: Foo | Bar) {\n  if (input instanceof FooBase) {\n    input.fooOnly();\n  } else {\n    input.barOnly();\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h2",{attrs:{id:"top-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#top-type"}},[s._v("#")]),s._v(" Top Type")]),s._v(" "),a("p",[s._v("再往上，我们就到达了类型层级的顶端（是不是很快），这里只有 any 和 unknown 这两兄弟。any 与 unknown 是系统中设定为 Top Type 的两个类型，它们无视一切因果律，是类型世界的规则产物。因此， Object 类型自然会是 any 与 unknown 类型的子类型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Result22 = Object extends any ? 1 : 2; // 1\ntype Result23 = Object extends unknown ? 1 : 2; // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"向下探索-直到万物虚无"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#向下探索-直到万物虚无"}},[s._v("#")]),s._v(" 向下探索，直到万物虚无")]),s._v(" "),a("p",[s._v("向下地探索其实就简单多了，首先我们能确认一定有个 never 类型，因为它代表了“虚无”的类型，一个根本不存在的类型。对于这样的类型，它会是任何类型的子类型，当然也包括字面量类型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Result24 = never extends any ? 1 : 2; // 1\ntype Result25 = never extends unknown ? 1 : 2; // 1\ntype Result26 = never extends string ? 1 : 2; // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"infer-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#infer-关键字"}},[s._v("#")]),s._v(" infer 关键字")]),s._v(" "),a("p",[s._v("TypeScript 中支持通过 infer 关键字来在条件类型中提取类型的某一部分信息，比如上面我们要提取函数返回值类型的话，可以这么放：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type FunctionReturnType<T extends Func> = T extends (\n  ...args: any[]\n) => infer R\n  ? R\n  : never;\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("看起来是新朋友，其实还是老伙计。上面的代码其实表达了，当传入的类型参数满足 T extends (...args: any[] ) => infer R 这样一个结构（不用管 infer R，当它是 any 就行），返回 infer R 位置的值，即 R。否则，返回 never。\ninfer，意为推断，如 infer R 中 R 就表示 待推断的类型。 infer 只能在条件类型中使用，因为我们实际上仍然需要类型结构是一致的，比如上例中类型信息需要是一个函数类型结构，我们才能提取出它的返回值类型。如果连函数类型都不是，那我只会给你一个 never 。\n这里的类型结构当然并不局限于函数类型结构，还可以是数组：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Swap<T extends any[]> = T extends [infer A, infer B] ? [B, A] : T;\n\ntype SwapResult1 = Swap<[1, 2]>; // 符合元组结构，首尾元素替换[2, 1]\ntype SwapResult2 = Swap<[1, 2, 3]>; // 不符合结构，没有发生替换，仍是 [1, 2, 3]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("由于我们声明的结构是一个仅有两个元素的元组，因此三个元素的元组就被认为是不符合类型结构了。但我们可以使用 rest 操作符来处理任意长度的情况：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 提取首尾两个\ntype ExtractStartAndEnd<T extends any[]> = T extends [\n  infer Start,\n  ...any[],\n  infer End\n]\n  ? [Start, End]\n  : T;\n\n// 调换首尾两个\ntype SwapStartAndEnd<T extends any[]> = T extends [\n  infer Start,\n  ...infer Left,\n  infer End\n]\n  ? [End, ...Left, Start]\n  : T;\n\n// 调换开头两个\ntype SwapFirstTwo<T extends any[]> = T extends [\n  infer Start1,\n  infer Start2,\n  ...infer Left\n]\n  ? [Start2, Start1, ...Left]\n  : T;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("是的，infer 甚至可以和 rest 操作符一样同时提取一组不定长的类型，而 ...any[] 的用法是否也让你直呼神奇？上面的输入输出仍然都是数组，而实际上我们完全可以进行结构层面的转换。比如从数组到联合类型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type ArrayItemType<T> = T extends Array<infer ElementType> ? ElementType : never;\n\ntype ArrayItemTypeResult1 = ArrayItemType<[]>; // never\ntype ArrayItemTypeResult2 = ArrayItemType<string[]>; // string\ntype ArrayItemTypeResult3 = ArrayItemType<[string, number]>; // string | number\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"逆变与协变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逆变与协变"}},[s._v("#")]),s._v(" 逆变与协变")]),s._v(" "),a("p",[s._v("// 逆变和协变\n// 函数类型的参数类型使用子类型逆变的方式确定是否成立,\n// 返回值使用子类型协变的方式确定是否成立.")])])}),[],!1,null,null,null);a.default=e.exports}}]);